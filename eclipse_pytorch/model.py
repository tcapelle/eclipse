# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_model.ipynb (unless otherwise specified).

__all__ = ['Upsampler', 'IrradianceModule']

# Cell
import torch
import torch.nn as nn
import torch.nn.functional as F

from .layers import *

# Cell
class Upsampler(nn.Module):
    def __init__(self, sizes=[256,128,64], n_out=3):
        super().__init__()
        zsizes = zip(sizes[:-1], sizes[1:])
        self.convs = nn.Sequential(*[Bottleneck(si, sf, upsample=True) for si,sf in zsizes],
                                   Bottleneck(sizes[-1], sizes[-1], upsample=True),
                                   ConvBlock(sizes[-1], n_out, kernel_size=1, activation='none'))

    def forward(self, x):
        return self.convs(x)

# Cell
class IrradianceModule(nn.Module):
    def __init__(self):
        super().__init__()
        self.convs = nn.Sequential(ConvBlock(128, 64),
                                   ConvBlock(64, 64),
                                   nn.AdaptiveMaxPool2d(1)
                                  )
        self.linear = nn.Sequential(nn.Flatten(),
                                    nn.BatchNorm1d(64),
                                    nn.Linear(64, 1)
                                   )
    def forward(self, x):
        return self.linear(self.convs(x))